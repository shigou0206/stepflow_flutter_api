// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`

/// 后端结果转 Flutter 结构（字符串化）
class FrbExecDto {
  final String runId;
  final String mode;
  final String status;
  final String? result;
  final String startedAt;
  final String? finishedAt;

  const FrbExecDto({
    required this.runId,
    required this.mode,
    required this.status,
    this.result,
    required this.startedAt,
    this.finishedAt,
  });

  @override
  int get hashCode =>
      runId.hashCode ^
      mode.hashCode ^
      status.hashCode ^
      result.hashCode ^
      startedAt.hashCode ^
      finishedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FrbExecDto &&
          runtimeType == other.runtimeType &&
          runId == other.runId &&
          mode == other.mode &&
          status == other.status &&
          result == other.result &&
          startedAt == other.startedAt &&
          finishedAt == other.finishedAt;
}

/// Flutter 发起的执行启动请求（字段为字符串）
class FrbExecStart {
  final String? templateId;
  final String? dsl;
  final String? initCtx;
  final String? runId;
  final String? parentRunId;
  final String? parentStateName;

  const FrbExecStart({
    this.templateId,
    this.dsl,
    this.initCtx,
    this.runId,
    this.parentRunId,
    this.parentStateName,
  });

  @override
  int get hashCode =>
      templateId.hashCode ^
      dsl.hashCode ^
      initCtx.hashCode ^
      runId.hashCode ^
      parentRunId.hashCode ^
      parentStateName.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FrbExecStart &&
          runtimeType == other.runtimeType &&
          templateId == other.templateId &&
          dsl == other.dsl &&
          initCtx == other.initCtx &&
          runId == other.runId &&
          parentRunId == other.parentRunId &&
          parentStateName == other.parentStateName;
}

/// Flutter 发起的状态更新请求
class FrbExecUpdate {
  final String status;
  final String? result;

  const FrbExecUpdate({
    required this.status,
    this.result,
  });

  @override
  int get hashCode => status.hashCode ^ result.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FrbExecUpdate &&
          runtimeType == other.runtimeType &&
          status == other.status &&
          result == other.result;
}

/// Flutter 传入分页请求（Page）
class FrbPage {
  final PlatformInt64? limit;
  final PlatformInt64? offset;

  const FrbPage({
    this.limit,
    this.offset,
  });

  @override
  int get hashCode => limit.hashCode ^ offset.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FrbPage &&
          runtimeType == other.runtimeType &&
          limit == other.limit &&
          offset == other.offset;
}

/// Flutter 传入状态 + 分页请求
class FrbStatusPage {
  final String status;
  final PlatformInt64? limit;
  final PlatformInt64? offset;

  const FrbStatusPage({
    required this.status,
    this.limit,
    this.offset,
  });

  @override
  int get hashCode => status.hashCode ^ limit.hashCode ^ offset.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FrbStatusPage &&
          runtimeType == other.runtimeType &&
          status == other.status &&
          limit == other.limit &&
          offset == other.offset;
}
