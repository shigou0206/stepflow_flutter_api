// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'frb_apis/event_stream.dart';
import 'frb_apis/execution_api.dart';
import 'frb_dto/frb_engine_event.dart';
import 'frb_dto/frb_event_envelope.dart';
import 'frb_dto/frb_execution.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'init.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class StepflowApi extends BaseEntrypoint<StepflowApiApi, StepflowApiApiImpl,
    StepflowApiWire> {
  @internal
  static final instance = StepflowApi._();

  StepflowApi._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    StepflowApiApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required StepflowApiApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<StepflowApiApiImpl, StepflowApiWire>
      get apiImplConstructor => StepflowApiApiImpl.new;

  @override
  WireConstructor<StepflowApiWire> get wireConstructor =>
      StepflowApiWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1695204589;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'stepflow_frb_api',
    ioDirectory: '../stepflow-rust/stepflow-frb-api/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class StepflowApiApi extends BaseApi {
  Future<void> crateFrbApisExecutionApiDeleteExecution({required String runId});

  Future<FrbExecDto> crateFrbApisExecutionApiGetExecutionById(
      {required String runId});

  Future<void> crateInitInitStepflow();

  Future<List<FrbExecDto>> crateFrbApisExecutionApiListExecutions(
      {required FrbPage req});

  Future<List<FrbExecDto>> crateFrbApisExecutionApiListExecutionsByStatus(
      {required FrbStatusPage req});

  Stream<FrbEventEnvelope> crateFrbApisEventStreamStartEventStream();

  Future<FrbExecDto> crateFrbApisExecutionApiStartExecution(
      {required FrbExecStart req});

  Future<FrbExecDto> crateFrbApisExecutionApiUpdateExecution(
      {required String runId, required FrbExecUpdate req});
}

class StepflowApiApiImpl extends StepflowApiApiImplPlatform
    implements StepflowApiApi {
  StepflowApiApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateFrbApisExecutionApiDeleteExecution(
      {required String runId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(runId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApisExecutionApiDeleteExecutionConstMeta,
      argValues: [runId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApisExecutionApiDeleteExecutionConstMeta =>
      const TaskConstMeta(
        debugName: "delete_execution",
        argNames: ["runId"],
      );

  @override
  Future<FrbExecDto> crateFrbApisExecutionApiGetExecutionById(
      {required String runId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(runId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_exec_dto,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApisExecutionApiGetExecutionByIdConstMeta,
      argValues: [runId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApisExecutionApiGetExecutionByIdConstMeta =>
      const TaskConstMeta(
        debugName: "get_execution_by_id",
        argNames: ["runId"],
      );

  @override
  Future<void> crateInitInitStepflow() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateInitInitStepflowConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateInitInitStepflowConstMeta => const TaskConstMeta(
        debugName: "init_stepflow",
        argNames: [],
      );

  @override
  Future<List<FrbExecDto>> crateFrbApisExecutionApiListExecutions(
      {required FrbPage req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_frb_page(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_exec_dto,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApisExecutionApiListExecutionsConstMeta,
      argValues: [req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApisExecutionApiListExecutionsConstMeta =>
      const TaskConstMeta(
        debugName: "list_executions",
        argNames: ["req"],
      );

  @override
  Future<List<FrbExecDto>> crateFrbApisExecutionApiListExecutionsByStatus(
      {required FrbStatusPage req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_frb_status_page(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_exec_dto,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApisExecutionApiListExecutionsByStatusConstMeta,
      argValues: [req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApisExecutionApiListExecutionsByStatusConstMeta =>
      const TaskConstMeta(
        debugName: "list_executions_by_status",
        argNames: ["req"],
      );

  @override
  Stream<FrbEventEnvelope> crateFrbApisEventStreamStartEventStream() {
    final sink = RustStreamSink<FrbEventEnvelope>();
    unawaited(handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_StreamSink_frb_event_envelope_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateFrbApisEventStreamStartEventStreamConstMeta,
      argValues: [sink],
      apiImpl: this,
    )));
    return sink.stream;
  }

  TaskConstMeta get kCrateFrbApisEventStreamStartEventStreamConstMeta =>
      const TaskConstMeta(
        debugName: "start_event_stream",
        argNames: ["sink"],
      );

  @override
  Future<FrbExecDto> crateFrbApisExecutionApiStartExecution(
      {required FrbExecStart req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_frb_exec_start(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_exec_dto,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApisExecutionApiStartExecutionConstMeta,
      argValues: [req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApisExecutionApiStartExecutionConstMeta =>
      const TaskConstMeta(
        debugName: "start_execution",
        argNames: ["req"],
      );

  @override
  Future<FrbExecDto> crateFrbApisExecutionApiUpdateExecution(
      {required String runId, required FrbExecUpdate req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(runId, serializer);
        sse_encode_box_autoadd_frb_exec_update(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_exec_dto,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApisExecutionApiUpdateExecutionConstMeta,
      argValues: [runId, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApisExecutionApiUpdateExecutionConstMeta =>
      const TaskConstMeta(
        debugName: "update_execution",
        argNames: ["runId", "req"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  RustStreamSink<FrbEventEnvelope> dco_decode_StreamSink_frb_event_envelope_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  FrbExecStart dco_decode_box_autoadd_frb_exec_start(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frb_exec_start(raw);
  }

  @protected
  FrbExecUpdate dco_decode_box_autoadd_frb_exec_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frb_exec_update(raw);
  }

  @protected
  FrbPage dco_decode_box_autoadd_frb_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frb_page(raw);
  }

  @protected
  FrbStatusPage dco_decode_box_autoadd_frb_status_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frb_status_page(raw);
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  FrbEngineEvent dco_decode_frb_engine_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FrbEngineEvent_WorkflowStarted(
          runId: dco_decode_String(raw[1]),
        );
      case 1:
        return FrbEngineEvent_WorkflowFinished(
          runId: dco_decode_String(raw[1]),
          result: dco_decode_String(raw[2]),
        );
      case 2:
        return FrbEngineEvent_NodeEnter(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          input: dco_decode_String(raw[3]),
        );
      case 3:
        return FrbEngineEvent_NodeSuccess(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          output: dco_decode_String(raw[3]),
        );
      case 4:
        return FrbEngineEvent_NodeFailed(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          error: dco_decode_String(raw[3]),
        );
      case 5:
        return FrbEngineEvent_NodeCancelled(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          reason: dco_decode_String(raw[3]),
        );
      case 6:
        return FrbEngineEvent_NodeExit(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          status: dco_decode_String(raw[3]),
          durationMs: dco_decode_opt_box_autoadd_u_64(raw[4]),
        );
      case 7:
        return FrbEngineEvent_NodeDispatched(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          context: dco_decode_String(raw[3]),
        );
      case 8:
        return FrbEngineEvent_TimerScheduled(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          timestamp: dco_decode_String(raw[3]),
        );
      case 9:
        return FrbEngineEvent_TimerFired(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
        );
      case 10:
        return FrbEngineEvent_TaskReady(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          resource: dco_decode_String(raw[3]),
          input: dco_decode_opt_String(raw[4]),
        );
      case 11:
        return FrbEngineEvent_TaskFinished(
          runId: dco_decode_String(raw[1]),
          stateName: dco_decode_String(raw[2]),
          output: dco_decode_String(raw[3]),
        );
      case 12:
        return FrbEngineEvent_SubflowReady(
          runId: dco_decode_String(raw[1]),
          parentRunId: dco_decode_String(raw[2]),
          stateName: dco_decode_String(raw[3]),
          dsl: dco_decode_String(raw[4]),
          initCtx: dco_decode_String(raw[5]),
        );
      case 13:
        return FrbEngineEvent_SubflowFinished(
          parentRunId: dco_decode_String(raw[1]),
          childRunId: dco_decode_String(raw[2]),
          stateName: dco_decode_String(raw[3]),
          result: dco_decode_String(raw[4]),
        );
      case 14:
        return FrbEngineEvent_SubflowFailed(
          parentRunId: dco_decode_String(raw[1]),
          childRunId: dco_decode_String(raw[2]),
          stateName: dco_decode_String(raw[3]),
          error: dco_decode_String(raw[4]),
        );
      case 15:
        return FrbEngineEvent_UiEventPushed(
          runId: dco_decode_String(raw[1]),
          uiEvent: dco_decode_String(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FrbEventEnvelope dco_decode_frb_event_envelope(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FrbEventEnvelope(
      eventId: dco_decode_String(arr[0]),
      timestamp: dco_decode_String(arr[1]),
      source: dco_decode_String(arr[2]),
      payload: dco_decode_frb_engine_event(arr[3]),
    );
  }

  @protected
  FrbExecDto dco_decode_frb_exec_dto(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FrbExecDto(
      runId: dco_decode_String(arr[0]),
      mode: dco_decode_String(arr[1]),
      status: dco_decode_String(arr[2]),
      result: dco_decode_opt_String(arr[3]),
      startedAt: dco_decode_String(arr[4]),
      finishedAt: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  FrbExecStart dco_decode_frb_exec_start(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FrbExecStart(
      templateId: dco_decode_opt_String(arr[0]),
      dsl: dco_decode_opt_String(arr[1]),
      initCtx: dco_decode_opt_String(arr[2]),
      runId: dco_decode_opt_String(arr[3]),
      parentRunId: dco_decode_opt_String(arr[4]),
      parentStateName: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  FrbExecUpdate dco_decode_frb_exec_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FrbExecUpdate(
      status: dco_decode_String(arr[0]),
      result: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  FrbPage dco_decode_frb_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FrbPage(
      limit: dco_decode_opt_box_autoadd_i_64(arr[0]),
      offset: dco_decode_opt_box_autoadd_i_64(arr[1]),
    );
  }

  @protected
  FrbStatusPage dco_decode_frb_status_page(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FrbStatusPage(
      status: dco_decode_String(arr[0]),
      limit: dco_decode_opt_box_autoadd_i_64(arr[1]),
      offset: dco_decode_opt_box_autoadd_i_64(arr[2]),
    );
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<FrbExecDto> dco_decode_list_frb_exec_dto(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_frb_exec_dto).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  RustStreamSink<FrbEventEnvelope> sse_decode_StreamSink_frb_event_envelope_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  FrbExecStart sse_decode_box_autoadd_frb_exec_start(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frb_exec_start(deserializer));
  }

  @protected
  FrbExecUpdate sse_decode_box_autoadd_frb_exec_update(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frb_exec_update(deserializer));
  }

  @protected
  FrbPage sse_decode_box_autoadd_frb_page(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frb_page(deserializer));
  }

  @protected
  FrbStatusPage sse_decode_box_autoadd_frb_status_page(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frb_status_page(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  FrbEngineEvent sse_decode_frb_engine_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_runId = sse_decode_String(deserializer);
        return FrbEngineEvent_WorkflowStarted(runId: var_runId);
      case 1:
        var var_runId = sse_decode_String(deserializer);
        var var_result = sse_decode_String(deserializer);
        return FrbEngineEvent_WorkflowFinished(
            runId: var_runId, result: var_result);
      case 2:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_input = sse_decode_String(deserializer);
        return FrbEngineEvent_NodeEnter(
            runId: var_runId, stateName: var_stateName, input: var_input);
      case 3:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_output = sse_decode_String(deserializer);
        return FrbEngineEvent_NodeSuccess(
            runId: var_runId, stateName: var_stateName, output: var_output);
      case 4:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_error = sse_decode_String(deserializer);
        return FrbEngineEvent_NodeFailed(
            runId: var_runId, stateName: var_stateName, error: var_error);
      case 5:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_reason = sse_decode_String(deserializer);
        return FrbEngineEvent_NodeCancelled(
            runId: var_runId, stateName: var_stateName, reason: var_reason);
      case 6:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_status = sse_decode_String(deserializer);
        var var_durationMs = sse_decode_opt_box_autoadd_u_64(deserializer);
        return FrbEngineEvent_NodeExit(
            runId: var_runId,
            stateName: var_stateName,
            status: var_status,
            durationMs: var_durationMs);
      case 7:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_context = sse_decode_String(deserializer);
        return FrbEngineEvent_NodeDispatched(
            runId: var_runId, stateName: var_stateName, context: var_context);
      case 8:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_timestamp = sse_decode_String(deserializer);
        return FrbEngineEvent_TimerScheduled(
            runId: var_runId,
            stateName: var_stateName,
            timestamp: var_timestamp);
      case 9:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        return FrbEngineEvent_TimerFired(
            runId: var_runId, stateName: var_stateName);
      case 10:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_resource = sse_decode_String(deserializer);
        var var_input = sse_decode_opt_String(deserializer);
        return FrbEngineEvent_TaskReady(
            runId: var_runId,
            stateName: var_stateName,
            resource: var_resource,
            input: var_input);
      case 11:
        var var_runId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_output = sse_decode_String(deserializer);
        return FrbEngineEvent_TaskFinished(
            runId: var_runId, stateName: var_stateName, output: var_output);
      case 12:
        var var_runId = sse_decode_String(deserializer);
        var var_parentRunId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_dsl = sse_decode_String(deserializer);
        var var_initCtx = sse_decode_String(deserializer);
        return FrbEngineEvent_SubflowReady(
            runId: var_runId,
            parentRunId: var_parentRunId,
            stateName: var_stateName,
            dsl: var_dsl,
            initCtx: var_initCtx);
      case 13:
        var var_parentRunId = sse_decode_String(deserializer);
        var var_childRunId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_result = sse_decode_String(deserializer);
        return FrbEngineEvent_SubflowFinished(
            parentRunId: var_parentRunId,
            childRunId: var_childRunId,
            stateName: var_stateName,
            result: var_result);
      case 14:
        var var_parentRunId = sse_decode_String(deserializer);
        var var_childRunId = sse_decode_String(deserializer);
        var var_stateName = sse_decode_String(deserializer);
        var var_error = sse_decode_String(deserializer);
        return FrbEngineEvent_SubflowFailed(
            parentRunId: var_parentRunId,
            childRunId: var_childRunId,
            stateName: var_stateName,
            error: var_error);
      case 15:
        var var_runId = sse_decode_String(deserializer);
        var var_uiEvent = sse_decode_String(deserializer);
        return FrbEngineEvent_UiEventPushed(
            runId: var_runId, uiEvent: var_uiEvent);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FrbEventEnvelope sse_decode_frb_event_envelope(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_eventId = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_String(deserializer);
    var var_source = sse_decode_String(deserializer);
    var var_payload = sse_decode_frb_engine_event(deserializer);
    return FrbEventEnvelope(
        eventId: var_eventId,
        timestamp: var_timestamp,
        source: var_source,
        payload: var_payload);
  }

  @protected
  FrbExecDto sse_decode_frb_exec_dto(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_runId = sse_decode_String(deserializer);
    var var_mode = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_result = sse_decode_opt_String(deserializer);
    var var_startedAt = sse_decode_String(deserializer);
    var var_finishedAt = sse_decode_opt_String(deserializer);
    return FrbExecDto(
        runId: var_runId,
        mode: var_mode,
        status: var_status,
        result: var_result,
        startedAt: var_startedAt,
        finishedAt: var_finishedAt);
  }

  @protected
  FrbExecStart sse_decode_frb_exec_start(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_templateId = sse_decode_opt_String(deserializer);
    var var_dsl = sse_decode_opt_String(deserializer);
    var var_initCtx = sse_decode_opt_String(deserializer);
    var var_runId = sse_decode_opt_String(deserializer);
    var var_parentRunId = sse_decode_opt_String(deserializer);
    var var_parentStateName = sse_decode_opt_String(deserializer);
    return FrbExecStart(
        templateId: var_templateId,
        dsl: var_dsl,
        initCtx: var_initCtx,
        runId: var_runId,
        parentRunId: var_parentRunId,
        parentStateName: var_parentStateName);
  }

  @protected
  FrbExecUpdate sse_decode_frb_exec_update(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_status = sse_decode_String(deserializer);
    var var_result = sse_decode_opt_String(deserializer);
    return FrbExecUpdate(status: var_status, result: var_result);
  }

  @protected
  FrbPage sse_decode_frb_page(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_limit = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_offset = sse_decode_opt_box_autoadd_i_64(deserializer);
    return FrbPage(limit: var_limit, offset: var_offset);
  }

  @protected
  FrbStatusPage sse_decode_frb_status_page(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_status = sse_decode_String(deserializer);
    var var_limit = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_offset = sse_decode_opt_box_autoadd_i_64(deserializer);
    return FrbStatusPage(
        status: var_status, limit: var_limit, offset: var_offset);
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<FrbExecDto> sse_decode_list_frb_exec_dto(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbExecDto>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_frb_exec_dto(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_StreamSink_frb_event_envelope_Sse(
      RustStreamSink<FrbEventEnvelope> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_frb_event_envelope,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_frb_exec_start(
      FrbExecStart self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frb_exec_start(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frb_exec_update(
      FrbExecUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frb_exec_update(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frb_page(FrbPage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frb_page(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frb_status_page(
      FrbStatusPage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frb_status_page(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_frb_engine_event(
      FrbEngineEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FrbEngineEvent_WorkflowStarted(runId: final runId):
        sse_encode_i_32(0, serializer);
        sse_encode_String(runId, serializer);
      case FrbEngineEvent_WorkflowFinished(
          runId: final runId,
          result: final result
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(result, serializer);
      case FrbEngineEvent_NodeEnter(
          runId: final runId,
          stateName: final stateName,
          input: final input
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(input, serializer);
      case FrbEngineEvent_NodeSuccess(
          runId: final runId,
          stateName: final stateName,
          output: final output
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(output, serializer);
      case FrbEngineEvent_NodeFailed(
          runId: final runId,
          stateName: final stateName,
          error: final error
        ):
        sse_encode_i_32(4, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(error, serializer);
      case FrbEngineEvent_NodeCancelled(
          runId: final runId,
          stateName: final stateName,
          reason: final reason
        ):
        sse_encode_i_32(5, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(reason, serializer);
      case FrbEngineEvent_NodeExit(
          runId: final runId,
          stateName: final stateName,
          status: final status,
          durationMs: final durationMs
        ):
        sse_encode_i_32(6, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(status, serializer);
        sse_encode_opt_box_autoadd_u_64(durationMs, serializer);
      case FrbEngineEvent_NodeDispatched(
          runId: final runId,
          stateName: final stateName,
          context: final context
        ):
        sse_encode_i_32(7, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(context, serializer);
      case FrbEngineEvent_TimerScheduled(
          runId: final runId,
          stateName: final stateName,
          timestamp: final timestamp
        ):
        sse_encode_i_32(8, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(timestamp, serializer);
      case FrbEngineEvent_TimerFired(
          runId: final runId,
          stateName: final stateName
        ):
        sse_encode_i_32(9, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
      case FrbEngineEvent_TaskReady(
          runId: final runId,
          stateName: final stateName,
          resource: final resource,
          input: final input
        ):
        sse_encode_i_32(10, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(resource, serializer);
        sse_encode_opt_String(input, serializer);
      case FrbEngineEvent_TaskFinished(
          runId: final runId,
          stateName: final stateName,
          output: final output
        ):
        sse_encode_i_32(11, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(output, serializer);
      case FrbEngineEvent_SubflowReady(
          runId: final runId,
          parentRunId: final parentRunId,
          stateName: final stateName,
          dsl: final dsl,
          initCtx: final initCtx
        ):
        sse_encode_i_32(12, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(parentRunId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(dsl, serializer);
        sse_encode_String(initCtx, serializer);
      case FrbEngineEvent_SubflowFinished(
          parentRunId: final parentRunId,
          childRunId: final childRunId,
          stateName: final stateName,
          result: final result
        ):
        sse_encode_i_32(13, serializer);
        sse_encode_String(parentRunId, serializer);
        sse_encode_String(childRunId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(result, serializer);
      case FrbEngineEvent_SubflowFailed(
          parentRunId: final parentRunId,
          childRunId: final childRunId,
          stateName: final stateName,
          error: final error
        ):
        sse_encode_i_32(14, serializer);
        sse_encode_String(parentRunId, serializer);
        sse_encode_String(childRunId, serializer);
        sse_encode_String(stateName, serializer);
        sse_encode_String(error, serializer);
      case FrbEngineEvent_UiEventPushed(
          runId: final runId,
          uiEvent: final uiEvent
        ):
        sse_encode_i_32(15, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_String(uiEvent, serializer);
    }
  }

  @protected
  void sse_encode_frb_event_envelope(
      FrbEventEnvelope self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.eventId, serializer);
    sse_encode_String(self.timestamp, serializer);
    sse_encode_String(self.source, serializer);
    sse_encode_frb_engine_event(self.payload, serializer);
  }

  @protected
  void sse_encode_frb_exec_dto(FrbExecDto self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.runId, serializer);
    sse_encode_String(self.mode, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_opt_String(self.result, serializer);
    sse_encode_String(self.startedAt, serializer);
    sse_encode_opt_String(self.finishedAt, serializer);
  }

  @protected
  void sse_encode_frb_exec_start(FrbExecStart self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.templateId, serializer);
    sse_encode_opt_String(self.dsl, serializer);
    sse_encode_opt_String(self.initCtx, serializer);
    sse_encode_opt_String(self.runId, serializer);
    sse_encode_opt_String(self.parentRunId, serializer);
    sse_encode_opt_String(self.parentStateName, serializer);
  }

  @protected
  void sse_encode_frb_exec_update(
      FrbExecUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.status, serializer);
    sse_encode_opt_String(self.result, serializer);
  }

  @protected
  void sse_encode_frb_page(FrbPage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.limit, serializer);
    sse_encode_opt_box_autoadd_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_frb_status_page(
      FrbStatusPage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.status, serializer);
    sse_encode_opt_box_autoadd_i_64(self.limit, serializer);
    sse_encode_opt_box_autoadd_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_frb_exec_dto(
      List<FrbExecDto> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_frb_exec_dto(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
