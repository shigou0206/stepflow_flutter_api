// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'execution_api.dart';
import 'execution_types.dart';
import 'frb_api.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'init.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class StepflowApi extends BaseEntrypoint<StepflowApiApi, StepflowApiApiImpl,
    StepflowApiWire> {
  @internal
  static final instance = StepflowApi._();

  StepflowApi._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    StepflowApiApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required StepflowApiApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<StepflowApiApiImpl, StepflowApiWire>
      get apiImplConstructor => StepflowApiApiImpl.new;

  @override
  WireConstructor<StepflowApiWire> get wireConstructor =>
      StepflowApiWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1070449999;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'stepflow_frb_api',
    ioDirectory: '../stepflow-rust/stepflow-frb-api/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class StepflowApiApi extends BaseApi {
  Future<void> crateFrbApiDeleteExecution({required String runId});

  Future<void> crateExecutionApiDeleteExecution(
      {required ExecutionSqlxSvc svc, required String runId});

  Future<FrbExecutionResult> crateFrbApiGetExecution({required String runId});

  Future<FrbExecutionResult> crateExecutionApiGetExecution(
      {required ExecutionSqlxSvc svc, required String runId});

  Future<void> crateInitGetExecutionSvc();

  Future<void> crateInitInitAppState({required String dbPath});

  Future<List<FrbExecutionResult>> crateFrbApiListExecutions(
      {required FrbListRequest req});

  Future<List<FrbExecutionResult>> crateFrbApiListExecutionsByStatus(
      {required FrbListByStatusRequest req});

  Future<List<FrbExecutionResult>> crateExecutionApiListExecutions(
      {required ExecutionSqlxSvc svc, required FrbListRequest req});

  Future<List<FrbExecutionResult>> crateExecutionApiListExecutionsByStatus(
      {required ExecutionSqlxSvc svc, required FrbListByStatusRequest req});

  Future<FrbExecutionResult> crateFrbApiStartExecution(
      {required FrbStartExecutionRequest req});

  Future<FrbExecutionResult> crateExecutionApiStartExecution(
      {required ExecutionSqlxSvc svc, required FrbStartExecutionRequest req});

  Future<void> crateFrbApiUpdateExecution(
      {required String runId, required FrbExecUpdateRequest req});

  Future<void> crateExecutionApiUpdateExecution(
      {required ExecutionSqlxSvc svc,
      required String runId,
      required FrbExecUpdateRequest req});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExecutionSqlxSvc;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExecutionSqlxSvc;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExecutionSqlxSvcPtr;
}

class StepflowApiApiImpl extends StepflowApiApiImplPlatform
    implements StepflowApiApi {
  StepflowApiApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateFrbApiDeleteExecution({required String runId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(runId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApiDeleteExecutionConstMeta,
      argValues: [runId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApiDeleteExecutionConstMeta => const TaskConstMeta(
        debugName: "deleteExecution",
        argNames: ["runId"],
      );

  @override
  Future<void> crateExecutionApiDeleteExecution(
      {required ExecutionSqlxSvc svc, required String runId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
            svc, serializer);
        sse_encode_String(runId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateExecutionApiDeleteExecutionConstMeta,
      argValues: [svc, runId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateExecutionApiDeleteExecutionConstMeta =>
      const TaskConstMeta(
        debugName: "delete_execution",
        argNames: ["svc", "runId"],
      );

  @override
  Future<FrbExecutionResult> crateFrbApiGetExecution({required String runId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(runId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_execution_result,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApiGetExecutionConstMeta,
      argValues: [runId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApiGetExecutionConstMeta => const TaskConstMeta(
        debugName: "getExecution",
        argNames: ["runId"],
      );

  @override
  Future<FrbExecutionResult> crateExecutionApiGetExecution(
      {required ExecutionSqlxSvc svc, required String runId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
            svc, serializer);
        sse_encode_String(runId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_execution_result,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateExecutionApiGetExecutionConstMeta,
      argValues: [svc, runId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateExecutionApiGetExecutionConstMeta =>
      const TaskConstMeta(
        debugName: "get_execution",
        argNames: ["svc", "runId"],
      );

  @override
  Future<void> crateInitGetExecutionSvc() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateInitGetExecutionSvcConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateInitGetExecutionSvcConstMeta => const TaskConstMeta(
        debugName: "get_execution_svc",
        argNames: [],
      );

  @override
  Future<void> crateInitInitAppState({required String dbPath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(dbPath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateInitInitAppStateConstMeta,
      argValues: [dbPath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateInitInitAppStateConstMeta => const TaskConstMeta(
        debugName: "init_app_state",
        argNames: ["dbPath"],
      );

  @override
  Future<List<FrbExecutionResult>> crateFrbApiListExecutions(
      {required FrbListRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_frb_list_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_execution_result,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApiListExecutionsConstMeta,
      argValues: [req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApiListExecutionsConstMeta => const TaskConstMeta(
        debugName: "listExecutions",
        argNames: ["req"],
      );

  @override
  Future<List<FrbExecutionResult>> crateFrbApiListExecutionsByStatus(
      {required FrbListByStatusRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_frb_list_by_status_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_execution_result,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApiListExecutionsByStatusConstMeta,
      argValues: [req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApiListExecutionsByStatusConstMeta =>
      const TaskConstMeta(
        debugName: "listExecutionsByStatus",
        argNames: ["req"],
      );

  @override
  Future<List<FrbExecutionResult>> crateExecutionApiListExecutions(
      {required ExecutionSqlxSvc svc, required FrbListRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
            svc, serializer);
        sse_encode_box_autoadd_frb_list_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_execution_result,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateExecutionApiListExecutionsConstMeta,
      argValues: [svc, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateExecutionApiListExecutionsConstMeta =>
      const TaskConstMeta(
        debugName: "list_executions",
        argNames: ["svc", "req"],
      );

  @override
  Future<List<FrbExecutionResult>> crateExecutionApiListExecutionsByStatus(
      {required ExecutionSqlxSvc svc, required FrbListByStatusRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
            svc, serializer);
        sse_encode_box_autoadd_frb_list_by_status_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_frb_execution_result,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateExecutionApiListExecutionsByStatusConstMeta,
      argValues: [svc, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateExecutionApiListExecutionsByStatusConstMeta =>
      const TaskConstMeta(
        debugName: "list_executions_by_status",
        argNames: ["svc", "req"],
      );

  @override
  Future<FrbExecutionResult> crateFrbApiStartExecution(
      {required FrbStartExecutionRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_frb_start_execution_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_execution_result,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApiStartExecutionConstMeta,
      argValues: [req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApiStartExecutionConstMeta => const TaskConstMeta(
        debugName: "startExecution",
        argNames: ["req"],
      );

  @override
  Future<FrbExecutionResult> crateExecutionApiStartExecution(
      {required ExecutionSqlxSvc svc, required FrbStartExecutionRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
            svc, serializer);
        sse_encode_box_autoadd_frb_start_execution_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_frb_execution_result,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateExecutionApiStartExecutionConstMeta,
      argValues: [svc, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateExecutionApiStartExecutionConstMeta =>
      const TaskConstMeta(
        debugName: "start_execution",
        argNames: ["svc", "req"],
      );

  @override
  Future<void> crateFrbApiUpdateExecution(
      {required String runId, required FrbExecUpdateRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(runId, serializer);
        sse_encode_box_autoadd_frb_exec_update_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateFrbApiUpdateExecutionConstMeta,
      argValues: [runId, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateFrbApiUpdateExecutionConstMeta => const TaskConstMeta(
        debugName: "updateExecution",
        argNames: ["runId", "req"],
      );

  @override
  Future<void> crateExecutionApiUpdateExecution(
      {required ExecutionSqlxSvc svc,
      required String runId,
      required FrbExecUpdateRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
            svc, serializer);
        sse_encode_String(runId, serializer);
        sse_encode_box_autoadd_frb_exec_update_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateExecutionApiUpdateExecutionConstMeta,
      argValues: [svc, runId, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateExecutionApiUpdateExecutionConstMeta =>
      const TaskConstMeta(
        debugName: "update_execution",
        argNames: ["svc", "runId", "req"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ExecutionSqlxSvc => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ExecutionSqlxSvc => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc;

  @protected
  ExecutionSqlxSvc
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExecutionSqlxSvcImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ExecutionSqlxSvc
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ExecutionSqlxSvcImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  FrbExecUpdateRequest dco_decode_box_autoadd_frb_exec_update_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frb_exec_update_request(raw);
  }

  @protected
  FrbListByStatusRequest dco_decode_box_autoadd_frb_list_by_status_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frb_list_by_status_request(raw);
  }

  @protected
  FrbListRequest dco_decode_box_autoadd_frb_list_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frb_list_request(raw);
  }

  @protected
  FrbStartExecutionRequest dco_decode_box_autoadd_frb_start_execution_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_frb_start_execution_request(raw);
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  FrbExecUpdateRequest dco_decode_frb_exec_update_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FrbExecUpdateRequest(
      status: dco_decode_String(arr[0]),
      resultJson: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  FrbExecutionResult dco_decode_frb_execution_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FrbExecutionResult(
      runId: dco_decode_String(arr[0]),
      mode: dco_decode_String(arr[1]),
      status: dco_decode_String(arr[2]),
      resultJson: dco_decode_opt_String(arr[3]),
      startedAt: dco_decode_String(arr[4]),
      finishedAt: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  FrbListByStatusRequest dco_decode_frb_list_by_status_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FrbListByStatusRequest(
      status: dco_decode_String(arr[0]),
      limit: dco_decode_opt_box_autoadd_i_64(arr[1]),
      offset: dco_decode_opt_box_autoadd_i_64(arr[2]),
    );
  }

  @protected
  FrbListRequest dco_decode_frb_list_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FrbListRequest(
      limit: dco_decode_opt_box_autoadd_i_64(arr[0]),
      offset: dco_decode_opt_box_autoadd_i_64(arr[1]),
    );
  }

  @protected
  FrbStartExecutionRequest dco_decode_frb_start_execution_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FrbStartExecutionRequest(
      mode: dco_decode_String(arr[0]),
      templateId: dco_decode_opt_String(arr[1]),
      dslJson: dco_decode_opt_String(arr[2]),
      initCtxJson: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<FrbExecutionResult> dco_decode_list_frb_execution_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_frb_execution_result).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  ExecutionSqlxSvc
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExecutionSqlxSvcImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ExecutionSqlxSvc
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ExecutionSqlxSvcImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  FrbExecUpdateRequest sse_decode_box_autoadd_frb_exec_update_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frb_exec_update_request(deserializer));
  }

  @protected
  FrbListByStatusRequest sse_decode_box_autoadd_frb_list_by_status_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frb_list_by_status_request(deserializer));
  }

  @protected
  FrbListRequest sse_decode_box_autoadd_frb_list_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frb_list_request(deserializer));
  }

  @protected
  FrbStartExecutionRequest sse_decode_box_autoadd_frb_start_execution_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_frb_start_execution_request(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  FrbExecUpdateRequest sse_decode_frb_exec_update_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_status = sse_decode_String(deserializer);
    var var_resultJson = sse_decode_opt_String(deserializer);
    return FrbExecUpdateRequest(status: var_status, resultJson: var_resultJson);
  }

  @protected
  FrbExecutionResult sse_decode_frb_execution_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_runId = sse_decode_String(deserializer);
    var var_mode = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_resultJson = sse_decode_opt_String(deserializer);
    var var_startedAt = sse_decode_String(deserializer);
    var var_finishedAt = sse_decode_opt_String(deserializer);
    return FrbExecutionResult(
        runId: var_runId,
        mode: var_mode,
        status: var_status,
        resultJson: var_resultJson,
        startedAt: var_startedAt,
        finishedAt: var_finishedAt);
  }

  @protected
  FrbListByStatusRequest sse_decode_frb_list_by_status_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_status = sse_decode_String(deserializer);
    var var_limit = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_offset = sse_decode_opt_box_autoadd_i_64(deserializer);
    return FrbListByStatusRequest(
        status: var_status, limit: var_limit, offset: var_offset);
  }

  @protected
  FrbListRequest sse_decode_frb_list_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_limit = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_offset = sse_decode_opt_box_autoadd_i_64(deserializer);
    return FrbListRequest(limit: var_limit, offset: var_offset);
  }

  @protected
  FrbStartExecutionRequest sse_decode_frb_start_execution_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_mode = sse_decode_String(deserializer);
    var var_templateId = sse_decode_opt_String(deserializer);
    var var_dslJson = sse_decode_opt_String(deserializer);
    var var_initCtxJson = sse_decode_opt_String(deserializer);
    return FrbStartExecutionRequest(
        mode: var_mode,
        templateId: var_templateId,
        dslJson: var_dslJson,
        initCtxJson: var_initCtxJson);
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<FrbExecutionResult> sse_decode_list_frb_execution_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FrbExecutionResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_frb_execution_result(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
          ExecutionSqlxSvc self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExecutionSqlxSvcImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerExecutionSqlxSvc(
          ExecutionSqlxSvc self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ExecutionSqlxSvcImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_frb_exec_update_request(
      FrbExecUpdateRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frb_exec_update_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frb_list_by_status_request(
      FrbListByStatusRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frb_list_by_status_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frb_list_request(
      FrbListRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frb_list_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_frb_start_execution_request(
      FrbStartExecutionRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_frb_start_execution_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_frb_exec_update_request(
      FrbExecUpdateRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.status, serializer);
    sse_encode_opt_String(self.resultJson, serializer);
  }

  @protected
  void sse_encode_frb_execution_result(
      FrbExecutionResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.runId, serializer);
    sse_encode_String(self.mode, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_opt_String(self.resultJson, serializer);
    sse_encode_String(self.startedAt, serializer);
    sse_encode_opt_String(self.finishedAt, serializer);
  }

  @protected
  void sse_encode_frb_list_by_status_request(
      FrbListByStatusRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.status, serializer);
    sse_encode_opt_box_autoadd_i_64(self.limit, serializer);
    sse_encode_opt_box_autoadd_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_frb_list_request(
      FrbListRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_i_64(self.limit, serializer);
    sse_encode_opt_box_autoadd_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_frb_start_execution_request(
      FrbStartExecutionRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.mode, serializer);
    sse_encode_opt_String(self.templateId, serializer);
    sse_encode_opt_String(self.dslJson, serializer);
    sse_encode_opt_String(self.initCtxJson, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_frb_execution_result(
      List<FrbExecutionResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_frb_execution_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class ExecutionSqlxSvcImpl extends RustOpaque implements ExecutionSqlxSvc {
  // Not to be used by end users
  ExecutionSqlxSvcImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ExecutionSqlxSvcImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: StepflowApi
        .instance.api.rust_arc_increment_strong_count_ExecutionSqlxSvc,
    rustArcDecrementStrongCount: StepflowApi
        .instance.api.rust_arc_decrement_strong_count_ExecutionSqlxSvc,
    rustArcDecrementStrongCountPtr: StepflowApi
        .instance.api.rust_arc_decrement_strong_count_ExecutionSqlxSvcPtr,
  );
}
